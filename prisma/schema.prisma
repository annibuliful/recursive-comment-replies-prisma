// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model MediaFile {
  id               Int      @id @default(autoincrement())
  url              String
  providerPublicId String?
  key              String?
  user             User     @relation(fields: [userId], references: [authId])
  userId           String
  comment          Comment? @relation(fields: [commentId], references: [id])
  commentId        Int?     @default(autoincrement())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Search {
  id     Int   @id @default(autoincrement())
  User   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model User {
  id             Int         @id @default(autoincrement())
  authId         String      @unique
  email          String      @unique
  username       String      @unique
  provider       String?
  avatar_url     String?
  avatar_key     String?
  background_url String?
  background_key String?
  about          String?
  fullName       String?
  private        Boolean     @default(false)
  comments       Comment[]
  replies        Reply[]
  mediaFiles     MediaFile[]
  search         Search[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model Comment {
  id         Int         @id @default(autoincrement())
  title      String      @default("Untitled")
  content    String      @default("")
  hashtags   String[]    @default([])
  author     User        @relation(fields: [authId], references: [authId])
  authId     String
  mediaFiles MediaFile[]
  replies    Reply[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Reply {
  id            Int      @id @default(autoincrement())
  content       String
  author        User     @relation(fields: [authId], references: [authId])
  authId        String
  comment       Comment? @relation(fields: [commentId], references: [id])
  commentId     Int
  parentReplyId Int? // it should optional if this is the first level of reply
  parentReply   Reply?   @relation(name: "parent-reply", fields: [parentReplyId], references: [id], onDelete: Cascade)
  replies       Reply[]  @relation(name: "parent-reply")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
